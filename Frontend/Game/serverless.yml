service: Game
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-central-1

plugins:
  - serverless-s3-sync
  - serverless-offline
  - serverless-s3-local
  - serverless-plugin-scripts
  - ./get-certificate-arn.js

custom:
  certificateArn: ${getCertificateArn(us-east-1, ganhammar.se)}
  gameBucketName: 'ganhammar.se-${sls:stage}'
  s3Sync:
    endpoint: http://localhost:3001
    buckets:
      - bucketName: ${self:custom.gameBucketName}
        localDir: src
  serverless-offline:
    lambdaPort: 3003
  scripts:
    hooks:
      'before:deploy:deploy': node update-api-url.js http://localhost:3000 https://api.ganhammar.se/${sls:stage}
      'deploy:finalize': node update-api-url.js https://api.ganhammar.se/${sls:stage} http://localhost:3000

resources:
  Conditions:
    IsProduction: !Equals ['${sls:stage}', 'prod']
  Resources:
    GameAccessPolicy:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'GameAccessPolicy-${sls:stage}'
    GameCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: 'GameCachePolicy-${sls:stage}'
          MinTTL: 1
          DefaultTTL: 86400
          MaxTTL: 31536000
          ParametersInCacheKeyAndForwardedToOrigin:
            EnableAcceptEncodingGzip: true
            EnableAcceptEncodingBrotli: true
            HeadersConfig:
              HeaderBehavior: none
            CookiesConfig:
              CookieBehavior: none
            QueryStringsConfig:
              QueryStringBehavior: none
    GameBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.gameBucketName}
    GameBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.gameBucketName}
        PolicyDocument:
          Statement:
            -
              Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Sub arn:aws:s3:::${self:custom.gameBucketName}/*
              Principal:
                AWS:
                  - Fn::Join:
                    - ""
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                      - Fn::GetAtt: [ GameAccessPolicy, Id ]
    GameDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: 'index.html'
          HttpVersion: http2
          Origins:
            - Id: S3Origin
              DomainName: '${self:custom.gameBucketName}.s3.${self:provider.region}.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Fn::GetAtt: [ GameAccessPolicy, Id ]
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId:
              Fn::GetAtt: [ GameCachePolicy, Id ]
          Aliases:
            - !If [IsProduction, 'www.ganhammar.se', '${sls:stage}.ganhammar.se']
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn}
            SslSupportMethod: sni-only
    GameDomainRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: !If [IsProduction, 'www.ganhammar.se', '${sls:stage}.ganhammar.se']
        HostedZoneName: 'ganhammar.se.'
        Type: CNAME
        TTL: '60'
        ResourceRecords:
          - Fn::GetAtt: [ GameDistribution, DomainName ]
